const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Import database
const { initDatabase } = require('./config/init-db');
const User = require('./models/User');

// Import upload config
const { 
  uploadSingle, 
  handleUploadError, 
  processUploadedFile, 
  deleteUploadedFile, 
  getUploadInfo, 
  UPLOAD_MODE 
} = require('./config/upload');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Kh·ªüi t·∫°o database khi start server
initDatabase().catch(error => {
  console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o database:', error);
});

// Route ch√≠nh - Gi·ªõi thi·ªáu ng√¥n ng·ªØ JavaScript trong l·∫≠p tr√¨nh Node.js
app.get('/', async (req, res) => {
  // Get upload info
  const uploadInfo = await getUploadInfo();
  
  res.json({
    message: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Node.js API Server!',
    description: 'Gi·ªõi thi·ªáu ng√¥n ng·ªØ JavaScript trong l·∫≠p tr√¨nh Node.js',
    features: [
      'JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë·ªông',
      'Node.js cho ph√©p ch·∫°y JavaScript tr√™n server',
      'Express.js l√† framework web nhanh v√† linh ho·∫°t',
      'H·ªó tr·ª£ x√¢y d·ª±ng RESTful API',
      'D·ªÖ d√†ng t√≠ch h·ª£p v·ªõi cloud services nh∆∞ AWS',
      'üÜï ƒê√£ k·∫øt n·ªëi v·ªõi MySQL Database!',
      `üì∏ Upload Mode: ${uploadInfo.mode.toUpperCase()}`
    ],
    endpoints: {
      'GET /': 'Gi·ªõi thi·ªáu ng√¥n ng·ªØ JavaScript',
      'GET /express': 'Gi·ªõi thi·ªáu Express.js',
      'GET /project': 'Th√¥ng tin v·ªÅ project Node.js Express',
      'GET /upload-info': 'Th√¥ng tin c·∫•u h√¨nh upload (local/S3)',
      'GET /users': 'L·∫•y danh s√°ch users t·ª´ database',
      'POST /users': 'T·∫°o user m·ªõi v√†o database',
      'PUT /users/:id': 'C·∫≠p nh·∫≠t user theo ID',
      'DELETE /users/:id': 'X√≥a user theo ID (auto reorder)',
      'POST /users/reorder': 'Reorder t·∫•t c·∫£ user IDs th·ªß c√¥ng',
      'POST /users/:id/upload-photo': 'Upload ·∫£nh ƒë·∫°i di·ªán cho user'
    },
    uploadInfo
  });
});

// Gi·ªõi thi·ªáu Express.js
app.get('/express', (req, res) => {
  res.json({
    framework: 'Express.js',
    description: 'Gi·ªõi thi·ªáu Express.js - Web framework cho Node.js',
    features: [
      'Framework web t·ªëi gi·∫£n v√† linh ho·∫°t',
      'H·ªó tr·ª£ middleware m·∫°nh m·∫Ω',
      'Routing ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£',
      'H·ªó tr·ª£ template engines',
      'D·ªÖ d√†ng x√¢y d·ª±ng API RESTful',
      'C·ªông ƒë·ªìng l·ªõn v√† t√†i li·ªáu phong ph√∫'
    ],
    version: require('./package.json').dependencies.express,
    documentation: 'https://expressjs.com/'
  });
});

// Th√¥ng tin v·ªÅ project
app.get('/project', async (req, res) => {
  const uploadInfo = await getUploadInfo();
  
  res.json({
    projectName: 'Node.js Express Cloud API',
    description: 'T·∫°o project Node.js Express ƒë·ªÉ h·ªçc cloud v√† t√≠ch h·ª£p AWS',
    technologies: [
      'Node.js - Runtime environment',
      'Express.js - Web framework', 
      'MySQL + Sequelize - Database ORM',
      'JavaScript ES6+ - Programming language',
      'RESTful API - Architecture pattern',
      'JSON - Data format',
      uploadInfo.mode === 's3' ? 'AWS S3 - Cloud storage' : 'Local Storage - File system'
    ],
    purpose: 'H·ªçc c√°ch x√¢y d·ª±ng API ƒë·ªÉ t√≠ch h·ª£p v·ªõi cloud services',
    currentProgress: uploadInfo.mode === 's3' ? 
      'Ng√†y 3: ‚úÖ ƒê√£ t√≠ch h·ª£p AWS S3 upload!' : 
      'Ng√†y 2: ‚úÖ ƒê√£ c√≥ upload ·∫£nh local!',
    nextSteps: uploadInfo.mode === 's3' ? [
      'Ng√†y 4: Test to√†n b·ªô S3 integration',
      'Ng√†y 5: Deploy l√™n cloud v·ªõi S3',
      'Ng√†y 6: Monitoring v√† optimization'
    ] : [
      'Ng√†y 3: T√≠ch h·ª£p AWS S3 ƒë·ªÉ upload ·∫£nh l√™n cloud',
      'Ng√†y 4: Thay th·∫ø local storage b·∫±ng S3 URLs',
      'Ng√†y 5: Test to√†n b·ªô API v√† deploy l√™n cloud'
    ],
    uploadInfo
  });
});

// Endpoint th√¥ng tin upload configuration
app.get('/upload-info', async (req, res) => {
  try {
    const uploadInfo = await getUploadInfo();
    
    res.json({
      success: true,
      message: 'Th√¥ng tin c·∫•u h√¨nh upload',
      data: uploadInfo
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin upload',
      error: error.message
    });
  }
});

// API Users - GET /users (L·∫•y danh s√°ch users t·ª´ database)
app.get('/users', async (req, res) => {
  try {
    const users = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    res.json({
      success: true,
      message: 'L·∫•y danh s√°ch users t·ª´ database th√†nh c√¥ng',
      data: users,
      total: users.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch users',
      error: error.message
    });
  }
});

// API Users - POST /users (T·∫°o user m·ªõi v√†o database)
app.post('/users', async (req, res) => {
  try {
    const { name, email, age } = req.body;
    
    // Validation c∆° b·∫£n
    if (!name || !email) {
      return res.status(400).json({
        success: false,
        message: 'T√™n v√† email l√† b·∫Øt bu·ªôc'
      });
    }

    // S·ª≠ d·ª•ng method t√πy ch·ªânh ƒë·ªÉ t·∫°o user v·ªõi validation
    const result = await User.createWithValidation({
      name,
      email,
      age: age || null
    });

    if (!result.success) {
      return res.status(400).json(result);
    }

    res.status(201).json({
      success: true,
      message: 'T·∫°o user m·ªõi v√†o database th√†nh c√¥ng',
      data: result.data
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t·∫°o user',
      error: error.message
    });
  }
});

// API Users - PUT /users/:id (C·∫≠p nh·∫≠t user trong database)
app.put('/users/:id', async (req, res) => {
  try {
    const userId = parseInt(req.params.id);
    const { name, email, age } = req.body;

    // T√¨m user
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // C·∫≠p nh·∫≠t user
    const updateData = {};
    if (name) updateData.name = name;
    if (email) updateData.email = email;
    if (age !== undefined) updateData.age = age;

    await user.update(updateData);

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t user trong database th√†nh c√¥ng',
      data: user
    });
  } catch (error) {
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ t·ªìn t·∫°i'
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t user',
      error: error.message
    });
  }
});

// API Users - DELETE /users/:id (X√≥a user kh·ªèi database v·ªõi reorder ID)
app.delete('/users/:id', async (req, res) => {
  try {
    const userId = parseInt(req.params.id);

    // S·ª≠ d·ª•ng method deleteWithReorder
    const result = await User.deleteWithReorder(userId);

    if (!result.success) {
      return res.status(404).json(result);
    }

    res.json(result);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi x√≥a user',
      error: error.message
    });
  }
});

// API Users - POST /users/:id/upload-photo (Upload ·∫£nh ƒë·∫°i di·ªán cho user - Hybrid Local/S3)
app.post('/users/:id/upload-photo', (req, res) => {
  const userId = parseInt(req.params.id);
  
  // Ki·ªÉm tra user t·ªìn t·∫°i tr∆∞·ªõc
  User.findByPk(userId).then(user => {
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }
    
    // Th·ª±c hi·ªán upload
    uploadSingle(req, res, async (err) => {
      if (err) {
        return handleUploadError(err, req, res);
      }
      
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ch·ªçn file ·∫£nh ƒë·ªÉ upload'
        });
      }
      
      let oldPhotoUrl = user.photo; // L∆∞u URL ·∫£nh c≈© ƒë·ªÉ x√≥a sau
      
      try {
        // Process uploaded file (local ho·∫∑c S3)
        const fileResult = await processUploadedFile(req.file);
        
        // C·∫≠p nh·∫≠t photo URL v√†o database
        await user.update({ photo: fileResult.url });
        
        // X√≥a ·∫£nh c≈© n·∫øu c√≥ (sau khi upload th√†nh c√¥ng)
        if (oldPhotoUrl) {
          try {
            await deleteUploadedFile(oldPhotoUrl);
          } catch (deleteError) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a ·∫£nh c≈©:', deleteError.message);
          }
        }
        
        // Tr·∫£ v·ªÅ th√¥ng tin ·∫£nh ƒë√£ upload
        res.json({
          success: true,
          message: `Upload ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng (${fileResult.mode})`,
          data: {
            user: user,
            photo: {
              mode: fileResult.mode,
              filename: fileResult.filename,
              originalName: fileResult.originalName,
              size: fileResult.size,
              mimetype: fileResult.mimetype,
              url: fileResult.url,
              ...(fileResult.mode === 's3' && {
                bucket: fileResult.bucket,
                etag: fileResult.etag
              }),
              ...(fileResult.mode === 'local' && {
                localPath: fileResult.path
              })
            }
          }
        });
        
      } catch (error) {
        // X√≥a file ƒë√£ upload n·∫øu c√≥ l·ªói database (ch·ªâ cho local)
        if (req.file && req.file.path && UPLOAD_MODE === 'local') {
          try {
            fs.unlinkSync(req.file.path);
          } catch (unlinkError) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file temp:', unlinkError.message);
          }
        }
        
        res.status(500).json({
          success: false,
          message: 'L·ªói khi upload ·∫£nh',
          error: error.message
        });
      }
    });
    
  }).catch(error => {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi ki·ªÉm tra user',
      error: error.message
    });
  });
});

// Serve static files t·ª´ th∆∞ m·ª•c uploads (ch·ªâ cho local mode)
if (UPLOAD_MODE === 'local') {
  app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
}

// API Users - POST /users/reorder (Reorder t·∫•t c·∫£ user IDs)
app.post('/users/reorder', async (req, res) => {
  try {
    console.log('üîÑ Y√™u c·∫ßu reorder user IDs t·ª´ API...');
    
    const result = await User.reorderIds();
    
    res.json({
      success: true,
      message: result.message,
      newCount: result.newCount || 0
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi reorder user IDs',
      error: error.message
    });
  }
});

// Middleware x·ª≠ l√Ω l·ªói 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Kh√¥ng t√¨m th·∫•y endpoint n√†y',
    availableEndpoints: [
      'GET /',
      'GET /express', 
      'GET /project',
      'GET /upload-info',
      'GET /users',
      'POST /users',
      'PUT /users/:id',
      'DELETE /users/:id',
      'POST /users/reorder',
      'POST /users/:id/upload-photo'
    ]
  });
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, async () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
  console.log(`üìö C√°c API endpoints c√≥ s·∫µn:`);
  console.log(`   GET  /           - Gi·ªõi thi·ªáu ng√¥n ng·ªØ JavaScript`);
  console.log(`   GET  /express    - Gi·ªõi thi·ªáu Express.js`);
  console.log(`   GET  /project    - Th√¥ng tin project`);
  console.log(`   GET  /upload-info - Th√¥ng tin c·∫•u h√¨nh upload`);
  console.log(`   GET  /users      - L·∫•y danh s√°ch users t·ª´ DB`);
  console.log(`   POST /users      - T·∫°o user m·ªõi v√†o DB (auto reorder)`);
  console.log(`   PUT  /users/:id  - C·∫≠p nh·∫≠t user trong DB`);
  console.log(`   DELETE /users/:id - X√≥a user kh·ªèi DB (auto reorder)`);
  console.log(`   POST /users/reorder - Reorder t·∫•t c·∫£ user IDs`);
  console.log(`   POST /users/:id/upload-photo - Upload ·∫£nh ƒë·∫°i di·ªán`);
  console.log(`üíæ Database: MySQL + Sequelize ORM`);
  console.log(`üîÑ Auto ID Reorder: Enabled`);
  
  // Show upload info
  try {
    const uploadInfo = await getUploadInfo();
    console.log(`üì∏ Upload Mode: ${uploadInfo.mode.toUpperCase()}`);
    
    if (uploadInfo.mode === 's3') {
      if (uploadInfo.s3Status && uploadInfo.s3Status.success) {
        console.log(`‚òÅÔ∏è  AWS S3: Connected to ${uploadInfo.s3Status.bucket} (${uploadInfo.s3Status.region})`);
      } else {
        console.log(`‚ùå AWS S3: Connection failed - ${uploadInfo.s3Status?.error || 'Unknown error'}`);
        console.log(`‚ö†Ô∏è  Fallback to local mode required`);
      }
    } else {
      console.log(`üíæ Local Storage: ${path.join(__dirname, 'uploads')}`);
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  Upload info error: ${error.message}`);
  }
});

module.exports = app; 