const User = require('../models/User');
const { sequelize } = require('../config/database');

// üîç Hi·ªÉn th·ªã t·∫•t c·∫£ users
async function showAllUsers() {
  try {
    console.log('üîç Ki·ªÉm tra t·∫•t c·∫£ users trong database...\n');
    
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng\n');
    
    const users = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    console.log(`üìä T·ªïng s·ªë users: ${users.length}`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    if (users.length === 0) {
      console.log('üìã Ch∆∞a c√≥ users n√†o trong database');
    } else {
      users.forEach((user, index) => {
        console.log(`\n${index + 1}. üÜî ID: ${user.id}`);
        console.log(`   üë§ T√™n: ${user.name}`);
        console.log(`   üìß Email: ${user.email}`);
        console.log(`   üéÇ Tu·ªïi: ${user.age || 'Kh√¥ng c√≥'}`);
        console.log(`   üì∏ ·∫¢nh: ${user.photo || 'Ch∆∞a c√≥'}`);
        console.log(`   üìÖ T·∫°o l√∫c: ${new Date(user.created_at).toLocaleString('vi-VN')}`);
        console.log(`   üîÑ C·∫≠p nh·∫≠t: ${new Date(user.updated_at).toLocaleString('vi-VN')}`);
      });
    }
    
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üíæ Database: MySQL v·ªõi UTF-8 support');
    console.log('üéØ T·∫•t c·∫£ t√™n ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë√∫ng');
    console.log('üéâ H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh!');
    
    return users;
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  }
}

// üîß Fix IDs hi·ªán t·∫°i th√†nh th·ª© t·ª± li√™n t·ª•c
async function fixCurrentIds() {
  try {
    console.log('üîß ƒêang fix user IDs hi·ªán t·∫°i...\n');
    
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // Ki·ªÉm tra users hi·ªán t·∫°i
    const users = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    console.log('üìã Users tr∆∞·ªõc khi fix:');
    users.forEach(user => {
      console.log(`   ${user.id}. ${user.name} - ${user.email}`);
    });
    
    // Reorder IDs
    console.log('\nüîÑ Th·ª±c hi·ªán reorder...');
    const result = await User.reorderIds();
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    const usersAfter = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    console.log('\nüìã Users sau khi fix:');
    usersAfter.forEach(user => {
      console.log(`   ${user.id}. ${user.name} - ${user.email}`);
    });
    
    console.log(`\n‚úÖ ${result.message}`);
    console.log('üéØ IDs ƒë√£ ƒë∆∞·ª£c fix th√†nh th·ª© t·ª± li√™n t·ª•c!');
    
    return result;
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  }
}

// üß™ Test to√†n di·ªán Auto Reorder System
async function testAutoReorderSystem() {
  try {
    console.log('üß™ Test Auto Reorder IDs System\n');
    
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // 1. Ki·ªÉm tra users hi·ªán t·∫°i
    console.log('\nüìã Users tr∆∞·ªõc test:');
    const usersBefore = await User.findAll({
      order: [['id', 'ASC']]
    });
    const idsBefore = usersBefore.map(u => u.id);
    console.log(`   T·ªïng: ${usersBefore.length} users`);
    console.log(`   IDs: [${idsBefore.join(', ')}]`);
    
    // 2. Test th√™m user m·ªõi (auto reorder)
    console.log('\nüîµ TEST 1: Th√™m user m·ªõi (auto reorder)');
    const addResult = await User.createWithValidation({
      name: 'Test Auto Reorder',
      email: `testauto${Date.now()}@test.com`,
      age: 25
    });
    
    if (addResult.success) {
      console.log(`‚úÖ Th√™m th√†nh c√¥ng: ID ${addResult.data.id}`);
    } else {
      console.log(`‚ùå L·ªói: ${addResult.message}`);
      return;
    }
    
    // 3. Ki·ªÉm tra users sau khi th√™m
    const usersAfterAdd = await User.findAll({
      order: [['id', 'ASC']]
    });
    const idsAfterAdd = usersAfterAdd.map(u => u.id);
    console.log(`   IDs sau th√™m: [${idsAfterAdd.join(', ')}]`);
    
    // 4. Test x√≥a user (t√¨m user test ƒë·ªÉ x√≥a)
    const testUser = usersAfterAdd.find(u => u.email.includes('testauto'));
    if (testUser) {
      console.log(`\nüî¥ TEST 2: X√≥a user ID ${testUser.id} (auto reorder)`);
      const deleteResult = await User.deleteWithReorder(testUser.id);
      
      if (deleteResult.success) {
        console.log(`‚úÖ X√≥a th√†nh c√¥ng: ${deleteResult.message}`);
      } else {
        console.log(`‚ùå L·ªói: ${deleteResult.message}`);
        return;
      }
    }
    
    // 5. Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi
    const usersAfterDelete = await User.findAll({
      order: [['id', 'ASC']]
    });
    const idsAfterDelete = usersAfterDelete.map(u => u.id);
    
    // 6. Ki·ªÉm tra IDs c√≥ li√™n t·ª•c kh√¥ng
    const expectedIds = Array.from({length: idsAfterDelete.length}, (_, i) => i + 1);
    const isSequential = JSON.stringify(idsAfterDelete) === JSON.stringify(expectedIds);
    
    console.log('\nüéØ K·∫æT QU·∫¢ CU·ªêI:');
    console.log(`   IDs hi·ªán t·∫°i: [${idsAfterDelete.join(', ')}]`);
    console.log(`   IDs mong ƒë·ª£i: [${expectedIds.join(', ')}]`);
    console.log(`   Auto Reorder: ${isSequential ? '‚úÖ HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!' : '‚ùå KH√îNG HO·∫†T ƒê·ªòNG'}`);
    
    return {
      success: isSequential,
      before: idsBefore,
      after: idsAfterDelete,
      totalUsers: idsAfterDelete.length
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  }
}

// üéØ Test x√≥a user c·ª• th·ªÉ
async function testDeleteUser(userId) {
  try {
    console.log(`üî¥ TEST X√ìA USER ID ${userId}\n`);
    
    await sequelize.authenticate();
    
    // 1. Xem users tr∆∞·ªõc khi x√≥a
    const usersBefore = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    const targetUser = usersBefore.find(u => u.id === userId);
    if (!targetUser) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y user ID ${userId}`);
      return { success: false, message: 'User kh√¥ng t·ªìn t·∫°i' };
    }
    
    console.log('üìã TR∆Ø·ªöC KHI X√ìA:');
    console.log(`   T·ªïng users: ${usersBefore.length}`);
    console.log(`   IDs: [${usersBefore.map(u => u.id).join(', ')}]`);
    console.log(`\nüéØ S·∫º X√ìA: ${targetUser.name} (${targetUser.email})`);
    
    // 2. X√≥a user v·ªõi Auto Reorder
    console.log('\nüîÑ TH·ª∞C HI·ªÜN X√ìA...');
    const deleteResult = await User.deleteWithReorder(userId);
    
    if (!deleteResult.success) {
      console.log(`‚ùå L·ªói: ${deleteResult.message}`);
      return deleteResult;
    }
    
    console.log(`‚úÖ ${deleteResult.message}`);
    
    // 3. Xem users sau khi x√≥a
    const usersAfter = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    const idsAfter = usersAfter.map(u => u.id);
    const expectedIds = Array.from({length: idsAfter.length}, (_, i) => i + 1);
    const isSequential = JSON.stringify(idsAfter) === JSON.stringify(expectedIds);
    
    console.log('\nüìã SAU KHI X√ìA:');
    console.log(`   T·ªïng users: ${usersAfter.length} (gi·∫£m ${usersBefore.length - usersAfter.length})`);
    console.log(`   IDs: [${idsAfter.join(', ')}]`);
    console.log(`   Auto Reorder: ${isSequential ? '‚úÖ TH√ÄNH C√îNG!' : '‚ùå TH·∫§T B·∫†I!'}`);
    
    return {
      success: isSequential,
      deletedUser: deleteResult.data,
      before: usersBefore.map(u => u.id),
      after: idsAfter
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  }
}

// üìä Hi·ªÉn th·ªã th·ªëng k√™ IDs
async function showIdStats() {
  try {
    const users = await User.findAll({
      order: [['id', 'ASC']]
    });
    
    const ids = users.map(u => u.id);
    const expectedIds = Array.from({length: ids.length}, (_, i) => i + 1);
    const isSequential = JSON.stringify(ids) === JSON.stringify(expectedIds);
    
    console.log('üìä TH·ªêNG K√ä IDs:');
    console.log(`   T·ªïng users: ${users.length}`);
    console.log(`   IDs hi·ªán t·∫°i: [${ids.join(', ')}]`);
    console.log(`   IDs mong ƒë·ª£i: [${expectedIds.join(', ')}]`);
    console.log(`   Tr·∫°ng th√°i: ${isSequential ? '‚úÖ LI√äN T·ª§C' : '‚ùå C√ì KHO·∫¢NG TR·ªêNG'}`);
    
    if (!isSequential) {
      const gaps = [];
      for (let i = 1; i <= Math.max(...ids); i++) {
        if (!ids.includes(i)) {
          gaps.push(i);
        }
      }
      console.log(`   Kho·∫£ng tr·ªëng: [${gaps.join(', ')}]`);
    }
    
    return {
      total: users.length,
      ids: ids,
      isSequential: isSequential,
      gaps: isSequential ? [] : expectedIds.filter(id => !ids.includes(id))
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    throw error;
  }
}

module.exports = {
  showAllUsers,
  fixCurrentIds,
  testAutoReorderSystem,
  testDeleteUser,
  showIdStats,
  
  // Shortcut functions
  show: showAllUsers,
  fix: fixCurrentIds,
  test: testAutoReorderSystem,
  delete: testDeleteUser,
  stats: showIdStats
}; 