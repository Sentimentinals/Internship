const { Sequelize } = require('sequelize');

// T·∫°o connection t·∫°m ƒë·ªÉ t·∫°o database v·ªõi UTF-8
const createDatabaseIfNotExists = async () => {
  const tempSequelize = new Sequelize({
    dialect: 'mysql',
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    username: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD || '1111',
    // Kh√¥ng ch·ªâ ƒë·ªãnh database ƒë·ªÉ c√≥ th·ªÉ t·∫°o database
    dialectOptions: {
      charset: 'utf8mb4',
      collate: 'utf8mb4_unicode_ci'
    },
    logging: false
  });

  try {
    // T·∫°o database v·ªõi charset UTF-8 h·ªó tr·ª£ ti·∫øng Vi·ªát
    await tempSequelize.query(`CREATE DATABASE IF NOT EXISTS \`nodejs_cloud_api\` 
      CHARACTER SET utf8mb4 
      COLLATE utf8mb4_unicode_ci;`);
    console.log('‚úÖ Database "nodejs_cloud_api" ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi UTF-8 support!');
    await tempSequelize.close();
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o database:', error.message);
    await tempSequelize.close();
    throw error;
  }
};

// C·∫•u h√¨nh database ch√≠nh - MySQL 8.0 v·ªõi UTF-8 full support
const sequelize = new Sequelize({
  // Cho MySQL local (development)
  dialect: 'mysql',
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 3306,
  database: process.env.DB_NAME || 'nodejs_cloud_api',
  username: process.env.DB_USERNAME || 'root',
  password: process.env.DB_PASSWORD || '1111', // M·∫≠t kh·∫©u MySQL c·ªßa b·∫°n
  
  // C·∫•u h√¨nh ƒë·∫∑c bi·ªát cho MySQL 8.0 v·ªõi UTF-8 support
  dialectOptions: {
    charset: 'utf8mb4',
    collate: 'utf8mb4_unicode_ci',
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi s·ª≠ d·ª•ng UTF-8
    typeCast: function (field, next) {
      if (field.type === 'VAR_STRING') {
        return field.string();
      }
      return next();
    }
  },
  
  // Cho AWS RDS (production) - s·∫Ω d√πng sau
  // host: process.env.RDS_HOSTNAME,
  // port: process.env.RDS_PORT || 3306,
  // database: process.env.RDS_DB_NAME,
  // username: process.env.RDS_USERNAME,
  // password: process.env.RDS_PASSWORD,
  
  // C·∫•u h√¨nh pool connection
  pool: {
    max: 10,
    min: 0,
    acquire: 30000,
    idle: 10000
  },
  
  // Logging
  logging: process.env.NODE_ENV === 'development' ? console.log : false,
  
  // Timezone
  timezone: '+07:00',
  
  // Define options v·ªõi UTF-8 support
  define: {
    timestamps: true,
    underscored: true,
    freezeTableName: true,
    charset: 'utf8mb4',
    collate: 'utf8mb4_unicode_ci'
  }
});

// Test connection v√† t·∫°o database n·∫øu ch∆∞a c√≥
const testConnection = async () => {
  try {
    // T·∫°o database tr∆∞·ªõc
    await createDatabaseIfNotExists();
    
    // Th·ª≠ k·∫øt n·ªëi v·ªõi database ƒë√£ t·∫°o
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi MySQL 8.0 v·ªõi UTF-8 support th√†nh c√¥ng!');
    
    // Set connection charset to UTF-8
    await sequelize.query("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
    console.log('‚úÖ ƒê√£ set UTF-8 encoding cho connection!');
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', error.message);
    console.log('üí° G·ª£i √Ω:');
    console.log('   - Ki·ªÉm tra MySQL service c√≥ ch·∫°y kh√¥ng');
    console.log('   - Ki·ªÉm tra username/password (hi·ªán t·∫°i: root/1111)');
    console.log('   - MySQL c√≥ ƒëang ch·∫°y tr√™n port 3306 kh√¥ng?');
  }
};

module.exports = {
  sequelize,
  testConnection
}; 